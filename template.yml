AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31

Description: "Nuxt 3 on Lambda with SSR"

Parameters:
  DomainName:
    Type: String
    Description: "The domain name of website"
    Default: ""
  HostedZoneId:
    Type: String
    Description: "The Route53 hosted zone ID used for the domain"
    Default: ""
  AcmCertificateArn:
    Type: String
    Description: "The certificate ARN for the domain name provided, must be in us-east-1 region"
    Default: ""
  CloudFrontPriceClass:
    Type: String
    Description: "The price class for CloudFront distribution"
    Default: "PriceClass_100"
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
  DeveloperMode:
    Type: String
    Description: "Whether to allow localhost or not"
    Default: "DISABLED"
    AllowedValues:
      - "DISABLED"
      - "ENABLED"
  SsrCache:
    Type: String
    Description: "Whether to add cache to server side rendering"
    Default: "DISABLED"
    AllowedValues:
      - "DISABLED"
      - "ENABLED"
  AutoDeploy:
    Type: String
    Description: "Automatically deploy frontend at the end of stack create/update"
    Default: "DISABLED"
    AllowedValues:
      - "DISABLED"
      - "ENABLED"

Conditions:
  IsDomainProvided: !Not [!Equals [!Ref DomainName, ""]]
  IsHostedZoneIdProvided: !Not [!Equals [!Ref HostedZoneId, ""]]
  IsDeveloperModeEnabled: !Equals [!Ref DeveloperMode, "ENABLED"]
  IsSsrCacheEnabled: !Equals [!Ref SsrCache, "ENABLED"]
  IsAutoDeployEnabled: !Equals [!Ref AutoDeploy, "ENABLED"]

Resources:

  ##
  # DNS records
  ##

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsHostedZoneIdProvided
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront has a fixed hosted zone id

  ##
  # S3 bucket for static objects
  ##

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument: 
        Statement: 
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${Bucket}/*"
            Principal: 
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'

  ##
  # CloudFront CDN
  ##

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Comment: !Ref AWS::StackName
        HttpVersion: http2
        Origins:
          - Id: static
            DomainName: !Sub "${Bucket}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          - Id: ssr
            DomainName: !Sub "${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: ""
            OriginCustomHeaders:
              - HeaderName: X-OriginAccessIdentity
                HeaderValue: !Ref OriginAccessIdentity
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: 
                - TLSv1.2
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: ssr
          CachePolicyId: !If [IsSsrCacheEnabled, 658327ea-f89d-4fab-a63d-7e88639e58f6, 4135ea2d-6df8-44a3-9df3-4b5a84be39ad] # CachingOptimized or CachingDisabled
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
        CustomErrorResponses:
          - ErrorCachingMinTTL: 86400 # cache errors for 24h
            ErrorCode: 403 # object not found in bucket
            ResponseCode: 404
            ResponsePagePath: /404
        CacheBehaviors:
          - PathPattern: /_nuxt/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /favicon.ico
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /robots.txt
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: static
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /api/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            TargetOriginId: ssr
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          - PathPattern: /auth/*
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ssr
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
        PriceClass: !Ref CloudFrontPriceClass
        Aliases:
          - !If [IsDomainProvided, !Ref DomainName, !Ref AWS::NoValue]
        ViewerCertificate:
          AcmCertificateArn: !If [IsDomainProvided, !Ref AcmCertificateArn, !Ref AWS::NoValue]
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  ##
  # HTTP API handler for SSR
  ##

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Ref AWS::StackName
      StageName: $default

  HttpApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      CodeUri: .output/server/
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 256
      Timeout: 15
      Tracing: Active
      Environment:
        Variables:
          NUXT_ORIGIN_HEADER_NAME: X-OriginAccessIdentity
          NUXT_ORIGIN_HEADER_VALUE: !Ref OriginAccessIdentity
          NUXT_COGNITO_USER_POOL_ID: !Ref UserPool
          NUXT_COGNITO_CLIENT_ID: !Ref UserPoolClient
          NUXT_COGNITO_LOGIN_ENDPOINT: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login"
          NUXT_COGNITO_LOGOUT_ENDPOINT: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/logout"
          NUXT_COGNITO_REDIRECT_URI: !If [IsDomainProvided, !Sub "https://${DomainName}/", !Sub "https://${Distribution.DomainName}/"]
          NUXT_DYNAMODB_TABLE_NAME: "" 
          NUXT_SQS_QUEUE_URL: ""
          NUXT_EVENTS_SOURCE: !Sub "nuxt.${AWS::StackName}"
          NUXT_EVENTS_BUS_NAME: "default"
      Events:
        ProxyResource:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: $default
            Method: any

  ##
  # Static files deploy
  ##

  PublicFilesLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Condition: IsAutoDeployEnabled
    Properties:
      LayerName: !Sub "${AWS::StackName}-public"
      Description: !Sub "Public files for ${AWS::StackName}"
      ContentUri: .output/public
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - x86_64

  StaticFilesDeployFunction:
    Type: AWS::Serverless::Function
    Condition: IsAutoDeployEnabled
    Properties:
      FunctionName: !Sub "${AWS::StackName}-deploy"
      Runtime: nodejs18.x
      CodeUri: lambda/deploy
      Handler: index.handler
      Environment:
        Variables:
          S3_BUCKET: !Ref Bucket
          DISTRIBUTION_ID: !Ref Distribution
      Policies: 
        - S3CrudPolicy:
            BucketName: !Ref Bucket
        - Statement:
            - Sid: CloudFrontInvalidate
              Effect: Allow
              Action: cloudfront:CreateInvalidation
              Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"
      Layers:
        - !Ref PublicFilesLambdaLayer
      Events:
        StackCreatedOrUpdated:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - aws.cloudformation
              detail-type:
                - CloudFormation Stack Status Change
              detail:
                stack-id:
                  - !Ref AWS::StackId
                status-details:
                  status:
                    - UPDATE_COMPLETE
                    - CREATE_COMPLETE

  ##
  # Authentication
  ##

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true # disable user registration
      AutoVerifiedAttributes:
        - "email"
      UsernameAttributes:
        - "email"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: "8"
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: "verified_email"
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref AWS::StackName
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs: 
        - !If [IsDomainProvided, !Sub "https://${DomainName}/", !Sub "https://${Distribution.DomainName}/"]
        - !If [IsDeveloperModeEnabled, !Sub "http://localhost:3000/", !Ref AWS::NoValue]
      LogoutURLs: 
        - !If [IsDomainProvided, !Sub "https://${DomainName}/", !Sub "https://${Distribution.DomainName}/"]
        - !If [IsDeveloperModeEnabled, !Sub "http://localhost:3000/", !Ref AWS::NoValue]
      AllowedOAuthFlows:
        - implicit # required for "token" response type
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - openid # required for JWT token response (id_token)
        - profile
        - email
      TokenValidityUnits:
        IdToken: days
        AccessToken: days
        RefreshToken: days
      IdTokenValidity: 1 # from five minutes to one day
      AccessTokenValidity: 1 # from five minutes to one day
      RefreshTokenValidity: 30 # from 60 minutes to 10 years.

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref AWS::StackName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              "StringEquals":
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn

  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AWS::StackName

  UserPoolUICustomization: 
    Type: AWS::Cognito::UserPoolUICustomizationAttachment 
    DependsOn: UserPoolDomain
    Properties: 
      UserPoolId: !Ref UserPool
      ClientId: 'ALL'
      CSS: |
        .banner-customizable { 
          background-color: #6E6F6E;
          padding: 2em 0;
        }
        .background-customizable {
          background-color: #FAFAFA;
        }
        .submitButton-customizable {
          background-color: #6E6F6E;
        }
        .submitButton-customizable:hover {
          background-color: #6E6F6E;
        }
        .inputField-customizable {
          border-color: #FAFAFA;
        }
        .inputField-customizable:focus {
          border-color: #6E6F6E;
        }

Outputs:
  S3Bucket:
    Description: "The S3 bucket that contains static files"
    Value: !Ref Bucket
  CloudFrontDistribution:
    Description: "The CloudFront distribution in front of the S3 bucket"
    Value: !Ref Distribution
  WebsiteUrl:
    Description: "The website URL"
    Value: !If [IsDomainProvided, !Sub "https://${DomainName}/", !Sub "https://${Distribution.DomainName}/"]
  DeployLog:
    Condition: IsAutoDeployEnabled
    Description: "The CloudWatch log group where deploy log are saved"
    Value: !Sub "/aws/lambda/${StaticFilesDeployFunction}"
  ApplicationLog:
    Description: "The CloudWatch log group where application log are saved"
    Value: !Sub "/aws/lambda/${HttpApiFunction}"
